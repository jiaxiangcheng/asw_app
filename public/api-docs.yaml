swagger: "2.0"
info:
  title: "HackerNews API"
  description: ""
  version: "1.0.0"
# host: "aswlab.herokuapp.com"
host: "localhost:3000"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
tags:
- name: "submission"
  description: "Everything about Submissions"
- name: "comment"
  description: "Everything about Comments"
paths:
  /ask:
    get:
      tags:
      - "submission"
      summary: "Get all asks"
      description: "Get all asks"
      operationId: "getAllAsks"
      parameters: []
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
  /users:
    get:
      tags:
      - "users"
      summary: "Get all users"
      description: "Get all users"
      operationId: "getAllUsers"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid status value"
  /users/{userID}:
    get:
      tags:
      - "users"
      summary: "Get user by Id"
      description: "Get one user"
      operationId: "getUserID"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid status value"
    put:
      tags:
      - "users"
      security:
        - apiKey: []
      summary: "Edit current user"
      description: "Edit current user"
      operationId: "editUser"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of edit user"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "about"
        description: "About del usuario"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions:
    get:
      tags:
      - "submission"
      summary: "Get all Submissions"
      description: "Get all Submissions"
      operationId: "getAllSubmissions"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter submissions"
        type: "array"
        items:
          type: "string"
          enum:
          - "voted_by_me"
          default: "available"
        collectionFormat: "multi"
      security:
        - apiKey: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Add a new submission to the Hacker News"
      description: "Add a new submission to the Hacker News"
      operationId: "addSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions/{submissionID}:
    get:
      tags:
      - "submission"
      summary: "Find submission by ID"
      description: "Returns a single submission"
      operationId: "getSubmissionById"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
    put:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Update an exist submission"
      description: ""
      operationId: "updateSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
    delete:
      tags:
      - "submission"
      summary: "Delete submission by ID"
      description: "Delete a single submission"
      operationId: "deleteSubmissionById"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
  /submissions/user/{userID}:
    get:
      tags:
      - "submission"
      summary: "Find submissions by user ID"
      description: "Returns all submission corresponding with the user ID"
      operationId: "getSubmissionByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
  /submissions/{submissionID}/like:
    put:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Like an exist submission"
      description: "Like an exist submission"
      operationId: "likeSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to like"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions/{submissionID}/dislike:
    put:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Dislike an existing submission"
      description: "Dislike an existing submission"
      operationId: "dislikeSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to dislike"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions/{submissionID}/unvote:
    put:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Unvote an exist submission"
      description: ""
      operationId: "unvoteSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to unvote"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions/{submissionID}/comments:
    get:
      tags:
      - "submission"
      summary: "Get all comments with submissionID"
      description: "Get all comments which belongs to a submissionID"
      operationId: "getAllSubmissionsWithSubmissionID"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission from which we want to see its comments"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "submission"
      summary: "Add a new comment to a submission"
      description: "Posts comment to submission and returns link to it in 'Location' header"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission from which we want to see its comments"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Comment2"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
  /submissions/{submissionID}/comments/{commentID}:
    get:
      tags:
      - "submission"
      summary: "Find a comment with commentID from a submissions with submissionID"
      description: "Returns a single submission"
      operationId: "getComment"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
    put:
      tags:
      - "submission"
      summary: "Update the comment with commentID from submission with submissionID"
      description: "Puts comment to submission and returns link to it in 'Location' header"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission from which we want to see its comments"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Comment2"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
    delete:
      tags:
      - "submission"
      summary: "Delete comment by commentID and SubmissionID"
      description: "Delete a single comment from a submission"
      operationId: "deleteCommentFromSubmission"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        description: "ID of comment to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
    patch:
      tags:
      - "submission"
      summary: "Update the comment with commentID from submission with submissionID"
      description: "Patchs comment to submission and returns link to it in 'Location' header"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission from which we want to see its comments"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Comment2"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
  /news:
    get:
      tags:
      - "submission"
      summary: "Get submissions ordered by points desc"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getSubmissionsOrderedByPoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
  /newest:
    get:
      tags:
      - "submission"
      summary: "Get submissions ordered by created time desc"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getSubmissionsOrderedByCreatedTime"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
  /comments:
    get:
      tags:
      - "comment"
      summary: "Get all Comments"
      description: "Returns all comments"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter comments"
        type: "array"
        items:
          type: "string"
          enum:
          - "voted_by_me"
          default: "available"
        collectionFormat: "multi"
      - name: "created_by"
        in: "query"
        description: "UserID of creator"
        type: "integer"
      security:
        - apiKey: []
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
    post:
      tags:
      - "comment"
      summary: "Add a new comment to a submission"
      description: "Posts comment to submission and returns link to it in 'Location' header"
      parameters:
      - name: "Comment"
        in: "body"
        description: "Comment Text"
        required: true
        schema:
          $ref: "#/definitions/CommentCreate"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
  /comments/{commentID}:
    get:
      tags:
      - "comment"
      summary: "Find comment by ID"
      description: "Returns a single comment"
      operationId: "getCommentById"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: "Not Found"
      security:
        - apiKey: []
    put:
      tags:
      - "comment"
      security:
        - apiKey: []
      summary: "Update an existing comment"
      description: ""
      operationId: "updateComment"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "Comment"
        in: "body"
        description: "Comment object to update"
        required: true
        schema:
          $ref: "#/definitions/CommentUpdate"
      responses:
        200:
          description: "Successfully updated comment"
        401:
          description: "Authenticate as the user who created the comment"
        404:
          description: "No comment found for given ID"
    delete:
      tags:
      - "comment"
      summary: "Delete comment by ID"
      description: "Delete a single comment"
      operationId: "deleteCommentById"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
      security:
        - apiKey: []
  /comments/{commentID}/like:
    put:
      tags:
      - "comment"
      security:
        - apiKey: []
      summary: "Like an existing comment"
      description: "Like an existing comment"
      operationId: "likeComment"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to like"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully liked comment"
        401:
          description: "Authenticate as a user (no the one who created the comment)"
        404:
          description: "No comment found for given ID"
  /comments/{commentID}/dislike:
    put:
      tags:
      - "comment"
      security:
        - apiKey: []
      summary: "Dislike an existing comment"
      description: "Dislike an existing comment"
      operationId: "dislikeComment"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to dislike"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully disliked comment"
        401:
          description: "Authenticate as a user (no the one who created the comment)"
        404:
          description: "No comment found for given ID"
  /comments/{commentID}/unvote:
    put:
      tags:
      - "comment"
      security:
        - apiKey: []
      summary: "Unvote an existing comment"
      description: "Unvote an existing commen"
      operationId: "unvoteComment"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to unvote"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully unvoted comment"
        401:
          description: "Authenticate as a user (no the one who created the comment)"
        404:
          description: "No comment found for given ID"
  /comments/{commentID}/reply:
    post:
      tags:
      - "comment"
      summary: "Add a new reply to a comment"
      description: "Posts reply to comment and returns link to it in 'Location' header"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to unvote"
        required: true
        type: "integer"
        format: "int64"
      - name: "Reply"
        in: "body"
        description: "Reply Text"
        required: true
        schema:
          $ref: "#/definitions/CommentReply"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "Token"
    in: "header"
definitions:
  Submission:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
      url:
        type: "string"
      text:
        type: "string"
  User:
    type: object
    properties:
      about:
        type: string
    xml:
      name: User
  Comment:
    type: "object"
    properties:
      comment:
        type: "object"
        properties:
          id:
            type: "integer"
            description: "Unique identifier of the comment"
          submission_id:
            type: "integer"
            description: "Unique identifier of the submission the comment belongs to"
          user_id:
            type: "integer"
            description: "Unique identifier of the user who created the comment"
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
  Comment2:
    type: "object"
    properties:
      comment:
        type: "object"
        properties:
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
  CommentCreate:
    type: "object"
    properties:
      submission_id:
        type: "integer"
        description: "Unique identifier of the submission the comment belongs to"
      comment:
        type: "object"
        properties:
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
    required:
    - "comment"
  CommentReply:
    type: "object"
    properties:
      comment:
        type: "object"
        properties:
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
    required:
    - "comment"
  CommentUpdate:
      type: "object"
      properties:
        comment:
          type: "object"
          properties:
            body:
              type: "string"
              example: "The comment body..."
              description: "Comment Text"
      required:
      - "comment"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
