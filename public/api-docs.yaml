swagger: "2.0"
info:
  title: "HackerNews API"
  description: ""
  version: "1.0.0"
# host: "aswlab.herokuapp.com"
host: "localhost:3000"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
tags:
- name: "submission"
  description: "Everything about Submissions"
- name: "comment"
  description: "Everything about Comments"
paths:
  /submissions:
    get:
      tags:
      - "submission"
      summary: "Get all Submissions"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getAllSubmissions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Add a new submission to the Hacker News"
      description: ""
      operationId: "addSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /submissions/{submissionID}:
    get:
      tags:
      - "submission"
      summary: "Find submission by ID"
      description: "Returns a single submission"
      operationId: "getSubmissionById"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
    put:
      tags:
      - "submission"
      security:
        - apiKey: []
      summary: "Update an exist submission"
      description: ""
      operationId: "updateSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
        500:
          description: "You need to authorize before to make a request"
    delete:
      tags:
      - "submission"
      summary: "Delete submission by ID"
      description: "Delete a single submission"
      operationId: "deleteSubmissionById"
      produces:
      - "application/json"
      parameters:
      - name: "submissionID"
        in: "path"
        description: "ID of submission to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "submission not found"
      security:
        - apiKey: []
  /news:
    get:
      tags:
      - "submission"
      summary: "Get submissions ordered by points desc"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getSubmissionsOrderedByPoints"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
  /newest:
    get:
      tags:
      - "submission"
      summary: "Get submissions ordered by created time desc"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getSubmissionsOrderedByCreatedTime"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
  /comments:
    get:
      tags:
      - "comment"
      summary: "Get all Comments"
      description: "Returns all comments"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
    post:
      tags:
      - "comment"
      summary: "Add a new comment to a submission"
      description: "Posts comment to submission and returns link to it in 'Location' header"
      parameters:
      - name: "Comment"
        in: "body"
        description: "Comment Text"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      security:
        - apiKey: []
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
  /comments/{commentID}:
    get:
      tags:
      - "comment"
      summary: "Find comment by ID"
      description: "Returns a single comment"
      operationId: "getCommentById"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: "Not Found"
      security:
        - apiKey: []
    put:
      tags:
      - "comment"
      security:
        - apiKey: []
      summary: "Update an existing comment"
      description: ""
      operationId: "updateComment"
      parameters:
      - name: "commentID"
        in: "path"
        description: "ID of comment to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "Comment"
        in: "body"
        description: "Comment object to update"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Successfully updated comment"
        401:
          description: "Authenticate as the user who created the comment"
        404:
          description: "No comment found for given ID"
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "Token"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Submission:
    type: "object"
    required:
    - "title"
    properties:
      title:
        type: "string"
      url:
        type: "string"
      text:
        type: "string"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique identifier of this comment"
      submission_id:
        type: "integer"
        description: "Unique identifier of the submission the comment belongs to"
      comment:
        type: "object"
        properties:
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
    required:
    - "submission_id"
    - "comment"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
