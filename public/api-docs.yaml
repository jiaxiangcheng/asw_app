swagger: "2.0"
info:
  title: "HackerNews API"
  description: ""
  version: "1.0.0"
# host: "aswlab.herokuapp.com"
host: "localhost:3000"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
tags:
- name: "submission"
  description: "Everything about Submissions"
- name: "comment"
  description: "Everything about Comments"
paths:
  /submissions:
    get:
      tags:
      - "submission"
      summary: "Get all Submissions"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getAllSubmissions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
    post:
      tags:
      - "submission"
      summary: "Add a new submission to the Hacker News"
      description: ""
      operationId: "addSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object that needs to be added to the Hacker News"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "The request has been fulfilled and has resulted in one or more new resources being created."
        405:
          description: "Invalid input"
  /newest:
    get:
      tags:
      - "submission"
      summary: "Get submissions ordered by created time desc"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getSubmissionsOrderedByCreatedTime"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
  /comments:
    get:
      tags:
      - "comment"
      summary: "Get all Comments"
      description: "Returns all comments"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
    post:
      tags:
      - "comment"
      summary: "Add a new comment to a submission"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "Comment"
        in: "body"
        description: "Comment Text"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      security:
        - apiKey: []
      responses:
        201:
          description: "Comment created successfully"
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "Token"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Submission:
    type: "object"
    required:
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "A crazy title"
      url:
        type: "string"
        example: "http://example.com"
      text:
        type: "string"
        example: "HELP!!!"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "Submission"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique identifier of this comment"
      submission_id:
        type: "integer"
        description: "Unique identifier of the submission the comment belongs to"
      comment:
        type: "object"
        properties:
          body:
            type: "string"
            example: "The comment body..."
            description: "Comment Text"
    required:
    - "id"
    - "submission_id"
    - "comment"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
